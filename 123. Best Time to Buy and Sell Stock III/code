class Solution {
public:
    int solveMem(vector<int>& prices,int index,int buy,int limit,vector<vector<vector<int>>> &dp){
        if(index==prices.size()){
            return 0;
        }
        if(limit==0){
            return 0;
        }
        if(dp[index][buy][limit] != -1){
            return dp[index][buy][limit];
        }
        int profit = 0;
        if(buy){
            int buyans = -prices[index] + solveMem(prices,index+1,0,limit,dp);
            int skip = 0 + solveMem(prices,index+1,1,limit,dp);
            profit = max(buyans,skip);
        }
        else{
            int sellans = prices[index] + solveMem(prices,index+1,1,limit-1,dp);
            int skip = 0 + solveMem(prices,index+1,0,limit,dp); 
            profit = max(sellans,skip);
        }
        return dp[index][buy][limit] = profit;
    }
    int solveTab(vector<int>& prices){
        int n = prices.size();
        vector<vector<vector<int>>> dp(n+1,vector<vector<int>> (2,vector<int> (3,0)));

        for(int index=n-1;index>=0;index--){
            for(int buy=0;buy<=1;buy++){
                for(int limit=1;limit<=2;limit++){
                    int profit = 0;
                    if(buy){
                        int buyans = -prices[index] + dp[index+1][0][limit];
                        int skip = 0 + dp[index+1][1][limit];
                        profit = max(buyans,skip);
                    }
                    else{
                        int sellans = prices[index] + dp[index+1][1][limit-1];
                        int skip = 0 + dp[index+1][0][limit]; 
                        profit = max(sellans,skip);
                    }
                    dp[index][buy][limit] = profit;
                }
            }
        }
        return dp[0][1][2];
    }
    int solveSpace(vector<int>& prices){
        int n = prices.size();
        vector<vector<int>> curr(2,vector<int> (3,0));
        vector<vector<int>> next(2,vector<int> (3,0));

        for(int index=n-1;index>=0;index--){
            for(int buy=0;buy<=1;buy++){
                for(int limit=1;limit<=2;limit++){
                    int profit = 0;
                    if(buy){
                        int buyans = -prices[index] + next[0][limit];
                        int skip = 0 + next[1][limit];
                        profit = max(buyans,skip);
                    }
                    else{
                        int sellans = prices[index] + next[1][limit-1];
                        int skip = 0 + next[0][limit]; 
                        profit = max(sellans,skip);
                    }
                    curr[buy][limit] = profit;
                }
            }
            next = curr;
        }
        return next[1][2];
    }
    int maxProfit(vector<int>& prices) {
        //memoization
        // int n = prices.size();
        // vector<vector<vector<int>>> dp(n,vector<vector<int>> (2,vector<int> (3,-1)));
        // return solveMem(prices,0,1,2,dp);

        //tabulation
        // return solveTab(prices);

        //space optimization
        return solveSpace(prices);
    }
};

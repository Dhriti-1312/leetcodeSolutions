class Solution {
public:
    int minOperations(vector<int>& nums, int x) {
        int n = nums.size();
        int sum = 0;
        for(int i=0;i<n;i++){
            sum += nums[i];
        }
        if(sum==x){
            return n;
        }
        int k = sum-x;

        unordered_map<int,int> m;
        int preSum = 0;
        int maxLen = 0;
        for(int i=0;i<n;i++){
            preSum += nums[i];
            if(preSum==k){
                maxLen = max(maxLen,i+1);
            }
            int j = preSum-k;
            if(m.find(j)!=m.end()){
                maxLen = max(maxLen,i-m[j]);
            }
            if(m.find(preSum)==m.end()){
                m[preSum]=i;
            }
        }
        if(maxLen==0){
            return -1;
        }
        return n-maxLen;
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findPosition(vector<int>& inorder,int start,int end,int element){
        for(int i=start;i<=end;i++){
            if(inorder[i]==element){
                return i;
            }
        }
        return -1;
    }
    TreeNode* solve(vector<int>& pre, vector<int>& inorder,int &index,int start,int end,int n){
        
        if(index >= n || start > end){
            return NULL;
        }

        int element = pre[index++];
        TreeNode* root = new TreeNode(element);

        int pos = findPosition(inorder,start,end,element);

        root->left = solve(pre,inorder,index,start,pos-1,n);
        root->right = solve(pre,inorder,index,pos+1,end,n);

        return root;
    } 
    TreeNode* buildTree(vector<int>& pre, vector<int>& inorder) {
        int n = inorder.size();
        int preOrderIndex = 0;
        TreeNode* ans = solve(pre,inorder,preOrderIndex,0,n-1,n);
        return ans; 
    }
};

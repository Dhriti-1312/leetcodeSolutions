class Solution {
public:
    ListNode* getmiddle(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head->next;

        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    ListNode* reverse(ListNode* head){
        ListNode* curr = head;
        ListNode* fwd = NULL;
        ListNode* prev = NULL;

        while(curr != NULL){
            fwd = curr->next;
            curr->next = prev;
            prev = curr;
            curr = fwd;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return true;
        }
        ListNode* middle = getmiddle(head);
        ListNode* temp = middle->next;
        middle->next = reverse(temp);
        ListNode* head1 = head;
        ListNode* head2 = middle->next;
        while(head2 != NULL){
            if(head1->val != head2->val){
                return false;
            }
            else{
                head1 = head1->next;
                head2 = head2->next;
            }
            
        }
        return true;
    }
};

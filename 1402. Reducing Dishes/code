class Solution {
public:
    int solveMem(vector<int>& satisfaction,int i,int time,int n,vector<vector<int>> &dp){
        if(i==n){
            return 0;
        }
        if(dp[i][time] != -1){
            return dp[i][time];
        }
        int incl = (time+1)*satisfaction[i] + solveMem(satisfaction,i+1,time+1,n,dp);
        int excl = solveMem(satisfaction,i+1,time,n,dp);

        dp[i][time] = max(incl,excl);
        return dp[i][time];
    }
    int maxSatisfaction(vector<int>& satisfaction) {
        sort(satisfaction.begin(),satisfaction.end());
        int n = satisfaction.size();
        //memoization
        vector<vector<int>> dp(n+1, vector<int> (n+1,-1));
        return solveMem(satisfaction,0,0,n,dp);
    }
};

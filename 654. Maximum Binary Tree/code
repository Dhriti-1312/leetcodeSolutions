/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    pair<int,int> arrayMax(vector<int> nums, int s,int e){
        if(nums.empty()){
            return {-1,-1};
        }
        int maxEle = nums[s];
        int maxIndex = s;
        for(int i=s+1;i<=e;i++){
            if(nums[i]>maxEle){
                maxEle = nums[i];
                maxIndex = i;
            }
        }
        return {maxEle,maxIndex};
    }
    TreeNode* solve(vector<int>& nums,int s,int e){
        if(s>e){
            return NULL;
        }
        pair<int,int> ans = arrayMax(nums,s,e);
        TreeNode* root = new TreeNode(ans.first);

        root->left = solve(nums,s,ans.second-1);
        root->right = solve(nums,ans.second+1,e);

        return root;
    }
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        
        if(nums.size()==0){
            return NULL;
        }

        TreeNode* newRoot = solve(nums,0,nums.size()-1);
        return newRoot;

    }
};

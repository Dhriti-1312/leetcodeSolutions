class Solution {
public:
    int solve(vector<int>& prices,int index,int buy){
        if(index==prices.size()){
            return 0;
        }
        int profit = 0;
        if(buy){
            int buyans = -prices[index] + solve(prices,index+1,0);
            int skip = 0 + solve(prices,index+1,1);
            profit = max(buyans,skip);
        }
        else{
            int sellans = prices[index] + solve(prices,index+1,1);
            int skip = 0 + solve(prices,index+1,0); 
            profit = max(sellans,skip);
        }
        return profit;
    }
    int solveMem(vector<int>& prices,int index,int buy,vector<vector<int>> &dp){
        if(index==prices.size()){
            return 0;
        }
        if(dp[index][buy] != -1){
            return dp[index][buy];
        }
        int profit = 0;
        if(buy){
            int buyans = -prices[index] + solveMem(prices,index+1,0,dp);
            int skip = 0 + solveMem(prices,index+1,1,dp);
            profit = max(buyans,skip);
        }
        else{
            int sellans = prices[index] + solveMem(prices,index+1,1,dp);
            int skip = 0 + solveMem(prices,index+1,0,dp); 
            profit = max(sellans,skip);
        }
        return dp[index][buy] = profit;
    }
    int maxProfit(vector<int>& prices) {
        //recursive
        // return solve(prices,0,1);

        //memoization
        int n = prices.size();
        vector<vector<int>> dp(n,vector<int> (2,-1));
        return solveMem(prices,0,1,dp);
    }
};

class Solution {
public:
    int sumOfDigits(int n){
        int sum=0;
        while(n!=0){
            sum += n%10;
            n /= 10;
        }
        return sum;
    }
    int maximumSum(vector<int>& nums) {
        unordered_map<int,pair<int,int>> m;

        for(int i=0;i<nums.size();i++){
            int n = nums[i];
            int digitSum = sumOfDigits(n);

            if(m.find(digitSum)==m.end()){
                m[digitSum] = {n,-1};
            }
            else{
                int first = m[digitSum].first;
                int second = m[digitSum].second;

                if(n > first){
                    m[digitSum] = {n,first};
                }
                else if(n > second){
                    m[digitSum] = {first,n};
                }
            }
        }

        int maxSum = -1;
        for(auto& i : m){
            int first = i.second.first;
            int second = i.second.second;

            if(second != -1){
                maxSum = max(maxSum,first+second);
            }
        }
        return maxSum;
    }
};

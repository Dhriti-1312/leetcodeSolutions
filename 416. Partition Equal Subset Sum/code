class Solution {
public:
    bool solve(vector<int>& nums,int n,int i,int target,vector<vector<int>> &dp){
        if(i>=n){
            return 0;
        }
        if(target<0){
            return 0;
        }
        if(target==0){
            return 1;
        }
        if(dp[i][target] != -1){
            return dp[i][target];
        }
        bool incl = solve(nums,n,i+1,target-nums[i],dp);
        bool excl = solve(nums,n,i+1,target,dp);

        return dp[i][target] = incl || excl;
    }

    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int total = 0;
        for(int i=0;i<n;i++){
            total += nums[i];
        }
        if(total%2 != 0){
            return 0;
        }
        int target = total/2;
        vector<vector<int>> dp(n,vector<int> (target+1,-1));
        return solve(nums,n,0,target,dp);
    }
};
